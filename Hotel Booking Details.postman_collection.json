{
	"info": {
		"_postman_id": "62895df4-7026-465b-8526-ff8d37394ea2",
		"name": "Hotel Booking Details",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34657354"
	},
	"item": [
		{
			"name": "Create booking details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate Response API status code 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseJSON = pm.response.json();\r",
							"const bId = responseJSON.bookingid;\r",
							"pm.environment.set(\"booking_id\", bId);\r",
							"\r",
							"//Validate Status Code Name\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Validate Response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Validate Response has Content-type header and value\r",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{fname}}\",\r\n    \"lastname\": \"{{lname}}\",\r\n    \"totalprice\": \"{{tprice}}\",\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"super bowls\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking details using dynamic values",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate Response API status code 200",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"//Validate Status Code Name",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//Validate Response time is less than 200ms",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"//Validate Response has Content-type header and value",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Set Environment Variable Booking ID",
							"const responseResponse = pm.response.json();",
							"const bId = responseResponse.bookingid;",
							"pm.environment.set(\"booking_id\", bId);",
							"",
							"// Validate Booking API Response",
							"pm.test(\"Validate Booking API Response\", function () {",
							"    pm.expect(responseResponse.booking).to.have.property(\"firstname\", pm.environment.get(\"fname\"));",
							"    pm.expect(responseResponse.booking).to.have.property(\"lastname\", pm.environment.get(\"lname\"));",
							"    pm.expect(responseResponse.booking).to.have.property(\"additionalneeds\", pm.environment.get(\"addneeds\"));",
							"    pm.expect(responseResponse.booking.bookingdates).to.have.property(\"checkin\", pm.environment.get(\"checkInDate\"));",
							"    pm.expect(responseResponse.booking.bookingdates).to.have.property(\"checkout\", pm.environment.get(\"checkOutDate\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"incrementEnvironmentVariable(\"fname\");\r",
							"incrementEnvironmentVariable(\"lname\");\r",
							"incrementEnvironmentVariable(\"tprice\");\r",
							"incrementEnvironmentVariable(\"addneeds\");\r",
							"\r",
							"function incrementEnvironmentVariable(varName) {\r",
							"    // Get the current value from the environment variable\r",
							"    const currentValue = pm.environment.get(varName);\r",
							"\r",
							"    // Check if the currentValue is purely numeric\r",
							"    if (/^\\d+$/.test(currentValue)) {\r",
							"        // If purely numeric, increment it directly\r",
							"        const nextValue = parseInt(currentValue) + 1;\r",
							"        pm.environment.set(varName, nextValue.toString());\r",
							"    } else {\r",
							"        // Extract the numeric part from the current value\r",
							"        const numericPart = currentValue.match(/\\d+/)[0];\r",
							"        \r",
							"        // Increment the numeric part\r",
							"        const nextNumericPart = parseInt(numericPart) + 1;\r",
							"        \r",
							"        // Replace the old numeric part with the new incremented value\r",
							"        const nextValue = currentValue.replace(numericPart, nextNumericPart);\r",
							"        \r",
							"        // Update the environment variable with the new value\r",
							"        pm.environment.set(varName, nextValue);\r",
							"    }\r",
							"}\r",
							"\r",
							"// Get the current date in yyyy-MM-dd format\r",
							"const currentDate = new Date();\r",
							"const checkInDate = currentDate.toISOString().slice(0, 10);\r",
							"// Get the check-out date, which is 5 days from the current date\r",
							"currentDate.setDate(currentDate.getDate() + 5);\r",
							"const checkOutDate = currentDate.toISOString().slice(0, 10);\r",
							"// Set the variables in the Postman environment or globals\r",
							"pm.environment.set(\"checkInDate\", checkInDate);\r",
							"pm.environment.set(\"checkOutDate\", checkOutDate);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{fname}}\",\r\n    \"lastname\": \"{{lname}}\",\r\n    \"totalprice\": \"{{tprice}}\",\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkInDate}}\",\r\n        \"checkout\": \"{{checkOutDate}}\"\r\n    },\r\n    \"additionalneeds\": \"{{addneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all booking details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate Response API status code 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Validate Status Code Name\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Validate Response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Validate Response has Content-type header and value\r",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get specific booking details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate Response API status code 200",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"//Validate Response Status Code Name",
							"pm.test(\"Response status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//Validate Response time is less than 200ms",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"//Validate Response has Content-type header and value",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"//Validate Firstname and lastname are non-empty strings",
							"pm.test(\"Firstname and lastname are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Firstname should not be empty\");",
							"    pm.expect(responseData.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");",
							"});",
							"",
							"//Validate Totalprice is a non-negative integer",
							"pm.test(\"Totalprice is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.totalprice).to.be.a('number');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate token number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"TokenNo\", jsonData.token);\r",
							"\r",
							"//Validate Response API status code 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Validate Status Code Name\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Validate Response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Validate Response has Content-type header and value\r",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"admin\",\r\n    \"password\":\"password123\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update booking details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate Response API status code 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Validate Status Code Name\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Validate Response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Validate Response has Content-type header and value\r",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{TokenNo}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"firstname\": \"Put API Update FirstName\",\r\n      \"lastname\": \"Put API Update LastName\",\r\n      \"totalprice\": 1000,\r\n      \"depositpaid\": true,\r\n      \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n      },\r\n      \"additionalneeds\": \"Tester1\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update booking details partially",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate Response API status code 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Validate Status Code Name\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Validate Response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Validate Response has Content-type header and value\r",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{TokenNo}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Patch API Update FirstName\",\r\n    \"lastname\": \"Patch API Update LastName\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete booking details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate Response API status code 201\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"//Validate Status Code Name\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"//Validate Response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Validate Response has Content-type header and value\r",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{TokenNo}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		}
	]
}